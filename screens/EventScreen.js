import { React, useState, useEffect } from 'react';
import {
  Button,
  Platform,
  SafeAreaView,
  ScrollView,
  StyleSheet
} from 'react-native';
import DateTimePicker from '@react-native-community/datetimepicker';
import { format } from 'date-fns';
import { Input } from 'react-native-elements';
import { addDoc, collection, doc, getDoc, setDoc } from 'firebase/firestore/lite';
import { auth, db } from '../firebase';

const EventScreen = () => {
  const [eventName, setEventName] = useState('');
  const [address, setAddress] = useState('');
  const [postalCode, setPostalCode] = useState('');
  const [locality, setLocality] = useState('');
  const [startDateTime, setStartDateTime] = useState(new Date());
  const [endDateTime, setEndDateTime] = useState(new Date());
  const [maxAttendance, setMaxAttendance] = useState('');
  const [description, setDescription] = useState('');
  const [eventUrlLink, setEventUrlLink] = useState('');
  const [organizer, setOrganizer] = useState('');
  const [mode, setMode] = useState('date');
  const [show, setShow] = useState(false);
  const [isStart, setIsStart] = useState(true);
  // TODO: tags and cover image, validation, input fields UI (size etc)...

  // Creates a new event to the collection: 'event' with an autogenerated id in Firestore
  const setData = async () => {
    try {
      const docRef = await addDoc(collection(db, 'event'), {
        eventName: eventName,
        address: address,
        postalCode: postalCode,
        locality: locality,
        startDateTime: startDateTime,
        endDateTime: endDateTime,
        maxAttendance: maxAttendance,
        description: description,
        eventUrlLink: eventUrlLink,
        organizer: auth.currentUser.uid
      });
      // TODO: if succeed -> notification to user (e.g toast msg)
      // NB: an event id : docRef.id
    } catch (e) {
      console.error("Error adding document: ", e);
    }
  }
  // Handles date and time changes
  const onChange = (event, selectedDate) => {
    setShow(Platform.OS === 'ios');
    if (isStart) {
      const currentDate = selectedDate || startDateTime;
      setStartDateTime(currentDate);
    } else {
      const currentDate = selectedDate || endDateTime;
      setEndDateTime(currentDate);
    }
  }
  const showMode = (currentMode) => {
    setShow(true);
    setMode(currentMode);
  }
  const showDatepicker = () => {
    showMode('date');
  }
  const showTimepicker = () => {
    showMode('time');
  }
  /* can be used later on when updating the event (note: use updateDoc instead of setDoc)
  // Calls function getData every time the page reloads
  useEffect(() => {
    //getData()
  }, [])
  
  // Gets all of the data stored in collection 'event' that has the same id with the logged in user.
  const getData = async () => {
    const docRef = doc(db, 'event', auth.currentUser.uid);
    const docSnap = await getDoc(docRef);
  
    if (docSnap.exists()) {
      setEventName(docSnap.data().eventName);
      setAddress(docSnap.data().address);
      setLocality(docSnap.data().locality);
      setStartDateTime(docSnap.data().startDateTime.toDate());
      setEndDateTime(docSnap.data().endDateTime.toDate());
      setMaxAttendance(docSnap.data().maxAttendance);
      setDescription(docSnap.data().description);
      setEventUrlLink(docSnap.data().eventUrlLink);
      setOrganizer(docSnap.data().organizer);
    }
  }
  // Overrides or creates anything within the collection: 'event' and id: 'logged in user id'...
  // ...with the stuff inside the '{}' (in this case 'eventName: eventName').
  // For further development it might be wiser to store an array of events within the '{}'.
  // => so {[{ name: name, location: location,... }, { name: name, location: location,... },...]}
  const setData = async () => {
    await setDoc(doc(db, 'event', auth.currentUser.uid), {
      eventName: eventName,
      address: address,
      locality: locality,
      startDateTime: startDateTime,
      endDateTime: endDateTime,
      maxAttendance: maxAttendance,
      description: description,
      eventUrlLink: eventUrlLink,
      organizer: organizer
    })
  }
  */
  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        showsVerticalScrollIndicator={false}
        style={styles.inputContainer}>
        <Input
          label='ADDRESS'
          placeholder='Set an address for your event'
          value={address}
          onChangeText={text => setAddress(text)}
          style={styles.input}
          inputContainerStyle={{
            borderBottomWidth: 0
          }}
          labelStyle={{
            color: 'black'
          }}
        />
         <Input
          label='POSTAL CODE'
          placeholder='Set a postal code'
          value={postalCode}
          onChangeText={text => setPostalCode(text)}
          style={styles.input}
        />
        <Input
          label='CITY'
          placeholder='Set a locality for your event'
          value={locality}
          onChangeText={text => setLocality(text)}
          style={styles.input}
        />
        <Input
          label='START DATE'
          placeholder='Set date'
          value={format(new Date(startDateTime), 'd.M.yyyy')}
          onPressIn={() => { showDatepicker(); setIsStart(true); }}
          showSoftInputOnFocus={false}
          style={styles.input}
        />
        <Input
          label='START TIME'
          placeholder='Set start time'
          value={format(new Date(startDateTime), 'HH:mm')}
          onPressIn={() => { showTimepicker(); setIsStart(true); }}
          showSoftInputOnFocus={false}
          style={styles.input}
        />
        <Input
          label='END DATE'
          placeholder='Set date'
          value={format(new Date(endDateTime), 'd.M.yyyy')}
          onPressIn={() => { showDatepicker(); setIsStart(false); }}
          showSoftInputOnFocus={false}
          style={styles.input}
        />
        <Input
          label='END TIME'
          placeholder='Set end time'
          value={format(new Date(endDateTime), 'HH:mm')}
          onPressIn={() => { showTimepicker(); setIsStart(false); }}
          showSoftInputOnFocus={false}
          style={styles.input}
        />
        {isStart && show && (
          <DateTimePicker
            testID="dateTimePicker"
            value={startDateTime}
            mode={mode}
            is24Hour={true}
            display="default"
            onChange={onChange}
          />
        )}
        {!isStart && show && (
          <DateTimePicker
            testID="dateTimePicker"
            value={endDateTime}
            mode={mode}
            is24Hour={true}
            display="default"
            onChange={onChange}
          />
        )}
        <Input
          label='MAX ATTENDANCE'
          placeholder='Max'
          value={maxAttendance}
          onChangeText={text => setMaxAttendance(text)}
          keyboardType='numeric'
          style={styles.input}
        />
        <Input
          label='EVENT NAME'
          placeholder='Set event name, max 30 characters'
          value={eventName}
          onChangeText={text => setEventName(text)}
          style={styles.input}
        />
        <Input
          label='DESCRIPTION'
          placeholder='Describe your event'
          value={description}
          onChangeText={text => setDescription(text)}
          style={styles.input}
        />
        <Input
          label='HTTP LINK'
          placeholder="Anything you'd like to share?"
          value={eventUrlLink}
          onChangeText={text => setEventUrlLink(text)}
          style={styles.input}
        />
        <Button title='Publish event' onPress={setData} />
      </ScrollView>
    </SafeAreaView>
  )
}
export default EventScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  inputContainer: {
    width: '80%'
  },
  input: {
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 10,
    marginTop: 5
  },
})